{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///E:/GuestLinked/guestlinked/app/api/invite-agent/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Check for required environment variables\r\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\r\n  throw new Error('NEXT_PUBLIC_SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.NEXT_PUBLIC_SERVICE_ROLE) {\r\n  console.error('SUPABASE_SERVICE_ROLE_KEY is not set. Please add it to your environment variables.');\r\n}\r\n\r\n// Initialize Supabase client with service role key for admin operations\r\nconst supabaseAdmin = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n  process.env.NEXT_PUBLIC_SERVICE_ROLE || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n);\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // Check if service role key is available\r\n    if (!process.env.NEXT_PUBLIC_SERVICE_ROLE) {\r\n      return NextResponse.json(\r\n        { error: 'Service role key not configured. Please contact administrator.' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const { agentName, agentEmail, tempPassword, buyerUserId } = await request.json();\r\n\r\n    // Validate required fields\r\n    if (!agentName || !agentEmail || !tempPassword || !buyerUserId) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(agentEmail)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid email format' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify that the buyer exists and has the correct role\r\n    const { data: buyerSettings, error: buyerError } = await supabaseAdmin\r\n      .from('users_settings_tb')\r\n      .select('role, user_id')\r\n      .eq('user_id', buyerUserId)\r\n      .single();\r\n\r\n    if (buyerError || !buyerSettings) {\r\n      return NextResponse.json(\r\n        { error: 'Buyer not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (buyerSettings.role !== 'Buyer') {\r\n      return NextResponse.json(\r\n        { error: 'Only buyers can create agents' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Check if agent email already exists\r\n    const { data: existingUser, error: existingError } = await supabaseAdmin\r\n      .from('users_settings_tb')\r\n      .select('email')\r\n      .eq('email', agentEmail)\r\n      .single();\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'User with this email already exists' },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    // Create user in Supabase Auth\r\n    const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n      email: agentEmail,\r\n      password: tempPassword,\r\n      email_confirm: true, // Auto-confirm email\r\n      user_metadata: {\r\n        name: agentName,\r\n        role: 'Agent',\r\n        parent_buyer_id: buyerUserId\r\n      }\r\n    });\r\n\r\n    if (authError) {\r\n      console.error('Auth error:', authError);\r\n      return NextResponse.json(\r\n        { error: `Failed to create user: ${authError.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (!authUser.user) {\r\n      return NextResponse.json(\r\n        { error: 'Failed to create user - no user returned' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const agentUserId = authUser.user.id;\r\n\r\n    // Insert into users_settings_tb with agent role\r\n    const { error: settingsError } = await supabaseAdmin\r\n      .from('users_settings_tb')\r\n      .insert([\r\n        {\r\n          user_id: agentUserId,\r\n          email: agentEmail,\r\n          name: agentName,\r\n          role: 'Agent',\r\n          parent_buyer_id: buyerUserId,\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ]);\r\n\r\n    if (settingsError) {\r\n      console.error('Settings error:', settingsError);\r\n      \r\n      // If settings insertion fails, we should clean up the auth user\r\n      try {\r\n        await supabaseAdmin.auth.admin.deleteUser(agentUserId);\r\n      } catch (cleanupError) {\r\n        console.error('Failed to cleanup auth user:', cleanupError);\r\n      }\r\n\r\n      return NextResponse.json(\r\n        { error: `Failed to create agent settings: ${settingsError.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log the successful creation\r\n    console.log(`Agent created successfully: ${agentEmail} for buyer: ${buyerUserId}`);\r\n\r\n    return NextResponse.json(\r\n      { \r\n        success: true, \r\n        message: 'Agent invitation sent successfully',\r\n        agentId: agentUserId\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Invite agent error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Handle unsupported methods\r\nexport async function GET() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed' },\r\n    { status: 405 }\r\n  );\r\n}\r\n\r\nexport async function PUT() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed' },\r\n    { status: 405 }\r\n  );\r\n}\r\n\r\nexport async function DELETE() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed' },\r\n    { status: 405 }\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}