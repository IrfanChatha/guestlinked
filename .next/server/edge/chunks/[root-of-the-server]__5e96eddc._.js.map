{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.js"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextResponse } from 'next/server'\n\nexport async function middleware(request) {\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => {\n            request.cookies.set(name, value)\n            response.cookies.set(name, value, options)\n          })\n        },\n      },\n    }\n  )\n\n  // Define protected routes that require authentication\n  const protectedRoutes = [\n    '/dashboard',\n    '/buyer/buyer-dashboard', \n    '/buyer/websites',\n    '/seller/seller-dashboard',\n    '/add-website',\n    '/buyer/my-orders',\n    '/buyer/manage-orders',\n    '/seller/my-websites'\n  ]\n\n  // Define routes that authenticated users should not access\n  const publicOnlyRoutes = ['/']\n\n  const pathname = request.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route))\n  const isPublicOnlyRoute = publicOnlyRoutes.includes(pathname)\n\n  try {\n    // Quick auth check with timeout\n    const authPromise = supabase.auth.getUser()\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Auth timeout')), 3000)\n    )\n    \n    const { data: { user } } = await Promise.race([authPromise, timeoutPromise])\n    \n    // If user is authenticated and trying to access public-only routes (like home page)\n    if (user && isPublicOnlyRoute) {\n      try {\n        // Fetch user role to redirect to appropriate dashboard\n        const { data: userSettings, error: settingsError } = await supabase\n          .from('users_settings_tb')\n          .select('role')\n          .eq('user_id', user.id)\n          .single()\n\n        if (!settingsError && userSettings?.role) {\n          if (userSettings.role === 'Buyer') {\n            return NextResponse.redirect(new URL('/buyer/buyer-dashboard', request.url))\n          } else if (userSettings.role === 'Seller') {\n            return NextResponse.redirect(new URL('/seller/seller-dashboard', request.url))\n          } else {\n            return NextResponse.redirect(new URL('/dashboard', request.url))\n          }\n        } else {\n          // If role fetch fails, redirect to general dashboard\n          return NextResponse.redirect(new URL('/dashboard', request.url))\n        }\n      } catch (roleError) {\n        console.error('Error fetching user role:', roleError)\n        // Fallback to general dashboard\n        return NextResponse.redirect(new URL('/dashboard', request.url))\n      }\n    }\n    \n    // If user is not authenticated and trying to access protected routes\n    if (!user && isProtectedRoute) {\n      return NextResponse.redirect(new URL('/', request.url))\n    }\n    \n  } catch (error) {\n    console.error('Middleware auth error:', error.message)\n    \n    // If auth check fails and trying to access protected route, redirect to home\n    if (isProtectedRoute) {\n      return NextResponse.redirect(new URL('/', request.url))\n    }\n    \n    // If auth check fails on public routes, allow access\n  }\n\n  return response\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n  "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,OAAO;IACtC,IAAI,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC/B,SAAS;YACP,SAAS,QAAQ,OAAO;QAC1B;IACF;IAEA,MAAM,WAAW,CAAA,GAAA,iLAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;oBAC5C,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;oBAC1B,SAAS,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;gBACpC;YACF;QACF;IACF;IAGF,sDAAsD;IACtD,MAAM,kBAAkB;QACtB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,2DAA2D;IAC3D,MAAM,mBAAmB;QAAC;KAAI;IAE9B,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IACzC,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAC3E,MAAM,oBAAoB,iBAAiB,QAAQ,CAAC;IAEpD,IAAI;QACF,gCAAgC;QAChC,MAAM,cAAc,SAAS,IAAI,CAAC,OAAO;QACzC,MAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,SACrC,WAAW,IAAM,OAAO,IAAI,MAAM,kBAAkB;QAGtD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,QAAQ,IAAI,CAAC;YAAC;YAAa;SAAe;QAE3E,oFAAoF;QACpF,IAAI,QAAQ,mBAAmB;YAC7B,IAAI;gBACF,uDAAuD;gBACvD,MAAM,EAAE,MAAM,YAAY,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,SACxD,IAAI,CAAC,qBACL,MAAM,CAAC,QACP,EAAE,CAAC,WAAW,KAAK,EAAE,EACrB,MAAM;gBAET,IAAI,CAAC,iBAAiB,cAAc,MAAM;oBACxC,IAAI,aAAa,IAAI,KAAK,SAAS;wBACjC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,0BAA0B,QAAQ,GAAG;oBAC5E,OAAO,IAAI,aAAa,IAAI,KAAK,UAAU;wBACzC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,4BAA4B,QAAQ,GAAG;oBAC9E,OAAO;wBACL,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;oBAChE;gBACF,OAAO;oBACL,qDAAqD;oBACrD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;gBAChE;YACF,EAAE,OAAO,WAAW;gBAClB,QAAQ,KAAK,CAAC,6BAA6B;gBAC3C,gCAAgC;gBAChC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;YAChE;QACF;QAEA,qEAAqE;QACrE,IAAI,CAAC,QAAQ,kBAAkB;YAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B,MAAM,OAAO;QAErD,6EAA6E;QAC7E,IAAI,kBAAkB;YACpB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;IAEA,qDAAqD;IACvD;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}