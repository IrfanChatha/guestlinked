{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.js"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\r\nimport { NextResponse } from 'next/server'\r\n\r\nexport async function middleware(request) {\r\n  let response = NextResponse.next({\r\n    request: {\r\n      headers: request.headers,\r\n    },\r\n  })\r\n\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      cookies: {\r\n        get(name) {\r\n          return request.cookies.get(name)?.value\r\n        },\r\n        set(name, value, options) {\r\n          request.cookies.set({\r\n            name,\r\n            value,\r\n            ...options,\r\n          })\r\n          response = NextResponse.next({\r\n            request: {\r\n              headers: request.headers,\r\n            },\r\n          })\r\n          response.cookies.set({\r\n            name,\r\n            value,\r\n            ...options,\r\n          })\r\n        },\r\n        remove(name, options) {\r\n          request.cookies.set({\r\n            name,\r\n            value: '',\r\n            ...options,\r\n          })\r\n          response = NextResponse.next({\r\n            request: {\r\n              headers: request.headers,\r\n            },\r\n          })\r\n          response.cookies.set({\r\n            name,\r\n            value: '',\r\n            ...options,\r\n          })\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  const {\r\n    data: { session },\r\n  } = await supabase.auth.getSession();\r\n\r\n  const protectedRoutes = ['/dashboard', '/add-website', '/websites'];\r\n  const isProtected = protectedRoutes.some((route) =>\r\n    request.nextUrl.pathname.startsWith(route)\r\n  );\r\n\r\n  if (isProtected && !session) {\r\n    return NextResponse.redirect(new URL('/', request.url));\r\n  }\r\n\r\n\r\n  return response\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico).*)',\r\n  ],\r\n}\r\n  "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,OAAO;IACtC,IAAI,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC/B,SAAS;YACP,SAAS,QAAQ,OAAO;QAC1B;IACF;IAEA,MAAM,WAAW,CAAA,GAAA,iLAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP,KAAI,IAAI;gBACN,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,OAAO;YACpC;YACA,KAAI,IAAI,EAAE,KAAK,EAAE,OAAO;gBACtB,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA;oBACA,GAAG,OAAO;gBACZ;gBACA,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAC3B,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA;oBACA,GAAG,OAAO;gBACZ;YACF;YACA,QAAO,IAAI,EAAE,OAAO;gBAClB,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;gBACA,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAC3B,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;YACF;QACF;IACF;IAGF,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAElC,MAAM,kBAAkB;QAAC;QAAc;QAAgB;KAAY;IACnE,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,QACxC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAGtC,IAAI,eAAe,CAAC,SAAS;QAC3B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAGA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;KAKC,GACD;KACD;AACH"}}]
}